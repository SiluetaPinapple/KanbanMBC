@page "/fredderassigns/delete"
@using Microsoft.EntityFrameworkCore
@using KanbanMBC.Components.Models
@inject IDbContextFactory<KanbanMBC.Data.KanbanMBCContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>FredderAssign</h2>
    <hr />
    @if (fredderassign is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ShiftA</dt>
            <dd class="col-sm-10">@fredderassign.ShiftA</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ShiftB</dt>
            <dd class="col-sm-10">@fredderassign.ShiftB</dd>
        </dl>
        <EditForm method="post" Model="fredderassign" OnValidSubmit="DeleteFredderAssign" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(fredderassign is null)">Delete</button> |
            <a href="/fredderassigns">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private FredderAssign? fredderassign;

    [SupplyParameterFromQuery]
    private string Lin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        fredderassign = await context.FredderAssign.FirstOrDefaultAsync(m => m.Lin == Lin);

        if (fredderassign is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteFredderAssign()
    {
        using var context = DbFactory.CreateDbContext();
        context.FredderAssign.Remove(fredderassign!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/fredderassigns");
    }
}
